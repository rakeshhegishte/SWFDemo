/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.dc.swf.workflow;

import com.amazonaws.services.simpleworkflow.flow.ActivitiesClientBase;
import com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions;
import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericActivityClient;
import com.amazonaws.services.simpleworkflow.model.ActivityType;

public class TaskManagerActivitiesClientImpl extends ActivitiesClientBase implements TaskManagerActivitiesClient {

	public TaskManagerActivitiesClientImpl() {
        this(null, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public TaskManagerActivitiesClientImpl(GenericActivityClient genericClient) {
        this(genericClient, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }
    
    public TaskManagerActivitiesClientImpl(GenericActivityClient genericClient, 
            DataConverter dataConverter, ActivitySchedulingOptions schedulingOptions) {
            
        super(genericClient, dataConverter, schedulingOptions);
    }
    
    @Override
    public final Promise<String> activity1() {
        return activity1Impl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> activity1(Promise<?>... waitFor) {
        return activity1Impl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> activity1(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return activity1Impl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<String> activity1Impl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("TaskManagerActivities.activity1");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, String.class, waitFor);
    }

    @Override
    public final Promise<String> manualActivity() {
        return manualActivityImpl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> manualActivity(Promise<?>... waitFor) {
        return manualActivityImpl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> manualActivity(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return manualActivityImpl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<String> manualActivityImpl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("TaskManagerActivities.manualActivity");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, String.class, waitFor);
    }

    @Override
    public final Promise<String> activity2() {
        return activity2Impl((ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> activity2(Promise<?>... waitFor) {
        return activity2Impl((ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> activity2(ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return activity2Impl(optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<String> activity2Impl(final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType _activityType = new ActivityType();
		_activityType.setName("TaskManagerActivities.activity2");
		_activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[0];

        return (Promise)scheduleActivity(_activityType, _input_, optionsOverride, String.class, waitFor);
    }

}